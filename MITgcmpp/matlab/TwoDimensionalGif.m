function [] = TwoDimensionalGif(cutVar, cutVal, nameVar, movieName)
    % September 2016
    % author: Jonathan Barenboim
    % This function generates a gif of a two dimensional cross section of the
    % data generated by MITgcm

    % cutVar: The coordinate to produce the cross section at. Must be 'x' 'y' or 'z'
    % cutVal: The value at which to produce the cross section in meters
    % nameVar: The prefix of the .data and .meta file. Example 'T' or 'rho'
    % movieName: The desired name of the generated movie

    % load the .mat file built by the init scripts. 
	% Contains startTime, endTime, secPerIter, secPerFile, nx, ny, nz, dx, dy, dz
    load ('variables.mat');
    iterPerFile = secPerFile / secPerIter
    
	numFiles = floor( (endTime - startTime) / secPerFile) + 1
	if nameVar == 'Rho'
		numFiles = numFiles - 1
	end
    assert(any(['x', 'X', 'y', 'Y', 'z', 'Z', 'r', 'R'] == cutVar), ...
        'cutVar must be one of ''x'', ''y'', or ''z''');

    %get the center coordinates of the grid
    [gridX, gridY, gridZ] = MITgcmGetGrid('C');

    % set the axes and convert cut_val from meters to array index
    switch cutVar
        case {'x', 'X'}
            xAxisLabel = 'y(m)';
            yAxisLabel = 'z(m)';
            xAxisData = gridY;
            yAxisData = gridZ;
	        gridCutVal = getGridCutVal (cutVal, dx, nx)
        case {'y', 'Y'}
            xAxisLabel = 'x(m)';
            yAxisLabel = 'z(m)';
            xAxisData = gridX;
            yAxisData = gridZ;
	        gridCutVal = getGridCutVal (cutVal, dy, ny)
        case {'z', 'Z', 'r', 'R'}
            xAxisLabel = 'x(m)';
            yAxisLabel = 'y(m)';
            xAxisData = gridX;
            yAxisData = gridY; 
	        gridCutVal = getGridCutVal (cutVal, dz, nz)
    end
    
    data = zeros (length(xAxisData), length(yAxisData), numFiles); 
    nameValue = [cutVar, '=', num2str(cutVal), 'm'];

    %read in the .data and .meta files to MATLAB
    for m = 1:numFiles
        D = rdmds(nameVar, (m-1)*iterPerFile);
        switch cutVar
            case {'x', 'X'}
                data(:,:,m) = D(gridCutVal,:,:);
            case {'y', 'Y'}
                data(:,:,m) = D(:,gridCutVal,:);
            case {'z', 'Z', 'r', 'R'}
                data(:,:,m) = D(:,:,gridCutVal);
        end
    end
    %filter the solid wall, may cause problems for extreme cases
    data(data==0) = NaN;

    % Generate the gif
    MITgcmGenGifMovie(xAxisData, yAxisData, data, xAxisLabel, yAxisLabel, movieName, numFiles, secPerFile, nameVar, nameValue, 2);
end
